I"¶p<h2 id="tutorial">Tutorial</h2>

<ul>
  <li>English version: <a href="http://mnemstudio.org/path-finding-q-learning-tutorial.htm">http://mnemstudio.org/path-finding-q-learning-tutorial.htm</a></li>
  <li>Chinese version: <a href="https://blog.csdn.net/itplus/article/details/9361915">https://blog.csdn.net/itplus/article/details/9361915</a></li>
</ul>

<h2 id="flappy-bird">Flappy Bird</h2>

<p>Flappy Bird was a side-scrolling mobile game, the objective was to direct a flying bird, named ‚ÄúFaby‚Äù, who moves continuously to the right, between sets of Mario-like pipes. Note that the pipes always have the same gap between them and there is no end to the running track. If the player touches the pipes, they lose. Faby briefly flaps upward each time that the player taps the screen; if the screen is not tapped, Faby falls because of gravity; each pair of pipes that he navigates between earns the player a single point, with medals awarded for the score at the end of the game. Android devices enabled the access of world leaderboards, through Google Play. You can also play this game on-line: <a href="http://flappybird.io/">http://flappybird.io/</a>.</p>

<h2 id="tasks">Tasks</h2>

<p>Implement the algorithm in the tutorial example , and output the Q-matrix and the path with the highest values.</p>

<p>Now here is a flappy bird project (Python3) for you, and the file <code class="highlighter-rouge">bot.py</code> is incomplete. You should implement a flappy bird bot who learns from each game played via Q-learning.</p>

<p>Please pay attention to the following points:</p>

<ul>
  <li>The state of the bird is defined by the horizontal and vertical distances fro the next pip and the velocity of the bird.</li>
  <li>In order to understand the state space, you have You need to briefly understand the following sizes: <code class="highlighter-rouge">SCREENWIDTH=288,SCREENHEIGHT=512, PIPEGAPSIZE=100, BASEY=SCREENHEIGHT*0.79, PIPE=[52,320],PLAYER=[34,24],BASE=[336,112], BACKGROUND=[288,512],etc</code>.</li>
  <li>The Q values are dumped to the local JSON file <code class="highlighter-rouge">qvalues.json</code>.</li>
  <li><code class="highlighter-rouge">initialize_qvalues.py</code> is an independent file, and we can run <code class="highlighter-rouge">python initialize_qvalues.py</code> to initialize the Q values. Of course, this file has been initialized.</li>
  <li>You can run <code class="highlighter-rouge">python learn.py --verbose 5000</code> to update the Q values dumped to <code class="highlighter-rouge">qvalues.json</code> with 5000 iterations, and then run <code class="highlighter-rouge">python flappy.py</code> to observe the performance the bird.</li>
</ul>

<p>Please complete the function <code class="highlighter-rouge">update_scores()</code> in <code class="highlighter-rouge">bot.py</code>, and run <code class="highlighter-rouge">python learn.py --verbose 5000</code> and <code class="highlighter-rouge">python learn.py --verbose 10000</code> to get the following figures, respectively.</p>

<h2 id="codes-and-results">Codes and Results</h2>

<h3 id="qlearningpy"><code class="highlighter-rouge">QLearning.py</code></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span>


<span class="k">def</span> <span class="nf">qLearning</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">gamma</span><span class="o">=</span><span class="mf">0.8</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span><span class="mf">0.4</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">_episode</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iter</span><span class="p">):</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">numpy</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
        <span class="k">while</span> <span class="n">state</span> <span class="o">!=</span> <span class="n">end</span><span class="p">:</span>
            <span class="n">possible_actions</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">possible_q</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">action</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">r</span><span class="p">[</span><span class="n">state</span><span class="p">,</span> <span class="n">action</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">possible_actions</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">action</span><span class="p">)</span>
                    <span class="n">possible_q</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">q</span><span class="p">[</span><span class="n">state</span><span class="p">,</span> <span class="n">action</span><span class="p">])</span>

            <span class="n">action</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">if</span> <span class="n">numpy</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">epsilon</span><span class="p">:</span>
                <span class="n">action</span> <span class="o">=</span> <span class="n">possible_actions</span><span class="p">[</span><span class="n">numpy</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span>
                    <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">possible_actions</span><span class="p">))]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">action</span> <span class="o">=</span> <span class="n">possible_actions</span><span class="p">[</span><span class="n">numpy</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">possible_q</span><span class="p">)]</span>

            <span class="n">q</span><span class="p">[</span><span class="n">state</span><span class="p">,</span> <span class="n">action</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span><span class="p">[</span><span class="n">state</span><span class="p">,</span> <span class="n">action</span><span class="p">]</span> <span class="o">+</span> <span class="n">gamma</span> <span class="o">*</span> <span class="n">q</span><span class="p">[</span><span class="n">action</span><span class="p">].</span><span class="nb">max</span><span class="p">()</span>

            <span class="n">state</span> <span class="o">=</span> <span class="n">action</span>
    <span class="k">return</span> <span class="n">q</span>


<span class="k">def</span> <span class="nf">getPath</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">beg</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
    <span class="n">state</span> <span class="o">=</span> <span class="n">beg</span>
    <span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">state</span><span class="p">]</span>
    <span class="k">while</span> <span class="n">state</span> <span class="o">!=</span> <span class="n">end</span><span class="p">:</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="n">state</span><span class="p">].</span><span class="n">argmax</span><span class="p">()</span>
        <span class="n">path</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">path</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">q</span> <span class="o">=</span> <span class="n">qLearning</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">numpy</span><span class="p">.</span><span class="n">matrix</span><span class="p">(</span><span class="n">numpy</span><span class="p">.</span><span class="n">zeros</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">])),</span> <span class="n">r</span><span class="o">=</span><span class="n">numpy</span><span class="p">.</span><span class="n">matrix</span><span class="p">([</span>
        <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="o">-</span><span class="mi">1</span><span class="p">],</span>
        <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">],</span>
        <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="o">-</span><span class="mi">1</span><span class="p">],</span>
        <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="o">-</span><span class="mi">1</span><span class="p">],</span>
        <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">],</span>
        <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">]]))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">getPath</span><span class="p">(</span><span class="n">q</span><span class="p">))</span>
</code></pre></div></div>

<p>ËøêË°åÁªìÊûúÂ¶Ç‰∏ãÔºö</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[[</span>  0.    0.    0.    0.   80.    0. <span class="o">]</span>
 <span class="o">[</span>  0.    0.    0.   64.    0.  100. <span class="o">]</span>
 <span class="o">[</span>  0.    0.    0.   64.    0.    0. <span class="o">]</span>
 <span class="o">[</span>  0.   80.   51.2   0.   80.    0. <span class="o">]</span>
 <span class="o">[</span> 64.    0.    0.   64.    0.  100. <span class="o">]</span>
 <span class="o">[</span>  0.    0.    0.    0.    0.    0. <span class="o">]]</span>
<span class="o">[</span>2, 3, 1, 5]
</code></pre></div></div>

<h3 id="botpy"><code class="highlighter-rouge">bot.py</code></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">json</span>


<span class="k">class</span> <span class="nc">Bot</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s">"""
    The Bot class that applies the Qlearning logic to Flappy bird game
    After every iteration (iteration = 1 game that ends with the bird dying) updates Q values
    After every DUMPING_N iterations, dumps the Q values to the local JSON file
    """</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">gameCNT</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># Game count of current run, incremented after every death
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">DUMPING_N</span> <span class="o">=</span> <span class="mi">25</span>  <span class="c1"># Number of iterations to dump Q values to JSON after
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">discount</span> <span class="o">=</span> <span class="mf">1.0</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">r</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="o">-</span><span class="mi">1000</span><span class="p">}</span>  <span class="c1"># Reward function
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">lr</span> <span class="o">=</span> <span class="mf">0.7</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">load_qvalues</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">last_state</span> <span class="o">=</span> <span class="s">"420_240_0"</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">last_action</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">moves</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">load_qvalues</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""
        Load q values from a JSON file
        """</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">qvalues</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fil</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"qvalues.json"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">IOError</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">qvalues</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">fil</span><span class="p">)</span>
        <span class="n">fil</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">act</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">xdif</span><span class="p">,</span> <span class="n">ydif</span><span class="p">,</span> <span class="n">vel</span><span class="p">):</span>
        <span class="s">"""
        Chooses the best action with respect to the current state - Chooses 0 (don't flap) to tie-break
        """</span>
        <span class="n">state</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">map_state</span><span class="p">(</span><span class="n">xdif</span><span class="p">,</span> <span class="n">ydif</span><span class="p">,</span> <span class="n">vel</span><span class="p">)</span>

        <span class="bp">self</span><span class="p">.</span><span class="n">moves</span><span class="p">.</span><span class="n">append</span><span class="p">(</span>
            <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">last_state</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">last_action</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span>
        <span class="p">)</span>  <span class="c1"># Add the experience to the history
</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">last_state</span> <span class="o">=</span> <span class="n">state</span>  <span class="c1"># Update the last_state with the current state
</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">qvalues</span><span class="p">[</span><span class="n">state</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="p">.</span><span class="n">qvalues</span><span class="p">[</span><span class="n">state</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">last_action</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">return</span> <span class="mi">0</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">last_action</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">update_scores</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dump_qvalues</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
        <span class="s">"""
        Update qvalues via iterating over experiences
        """</span>
        <span class="n">history</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">moves</span><span class="p">))</span>

        <span class="c1"># Flag if the bird died in the top pipe
</span>        <span class="s">'''
        high_death_flag = True if int(
            history[0][2].split("_")[1]) &gt; 120 else False
        '''</span>
        <span class="c1"># Q-learning score updates
</span>        <span class="c1"># Your code here
</span>        <span class="k">for</span> <span class="n">t</span><span class="p">,</span> <span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">act</span><span class="p">,</span> <span class="n">next_state</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">history</span><span class="p">):</span>
            <span class="c1"># Select reward
</span>            <span class="c1"># Your code here
</span>            <span class="k">if</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">:</span>
                <span class="n">now_reward</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">t</span> <span class="o">*</span> <span class="mi">50</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">now_reward</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

            <span class="c1"># Update self.qvalues[state][act]
</span>            <span class="c1"># Your code here
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">qvalues</span><span class="p">[</span><span class="n">state</span><span class="p">][</span><span class="n">act</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="bp">self</span><span class="p">.</span><span class="n">lr</span><span class="p">)</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">qvalues</span><span class="p">[</span><span class="n">state</span><span class="p">][</span><span class="n">act</span><span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">lr</span> <span class="o">*</span> <span class="p">(</span>
                <span class="n">now_reward</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">discount</span> <span class="o">*</span> <span class="nb">max</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">qvalues</span><span class="p">[</span><span class="n">next_state</span><span class="p">]))</span>

        <span class="bp">self</span><span class="p">.</span><span class="n">gameCNT</span> <span class="o">+=</span> <span class="mi">1</span>  <span class="c1"># increase game count
</span>        <span class="k">if</span> <span class="n">dump_qvalues</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">dump_qvalues</span><span class="p">()</span>  <span class="c1"># Dump q values (if game count % DUMPING_N == 0)
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">moves</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># clear history after updating strategies
</span>
    <span class="k">def</span> <span class="nf">map_state</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">xdif</span><span class="p">,</span> <span class="n">ydif</span><span class="p">,</span> <span class="n">vel</span><span class="p">):</span>
        <span class="s">"""
        Map the (xdif, ydif, vel) to the respective state, with regards to the grids
        The state is a string, "xdif_ydif_vel"

        X -&gt; [-40,-30...120] U [140, 210 ... 420]
        Y -&gt; [-300, -290 ... 160] U [180, 240 ... 420]
        """</span>
        <span class="k">if</span> <span class="n">xdif</span> <span class="o">&lt;</span> <span class="mi">140</span><span class="p">:</span>
            <span class="n">xdif</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">xdif</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">xdif</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">xdif</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">xdif</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">xdif</span><span class="p">)</span> <span class="o">%</span> <span class="mi">70</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">ydif</span> <span class="o">&lt;</span> <span class="mi">180</span><span class="p">:</span>
            <span class="n">ydif</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">ydif</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">ydif</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">ydif</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">ydif</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">ydif</span><span class="p">)</span> <span class="o">%</span> <span class="mi">60</span><span class="p">)</span>

        <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">xdif</span><span class="p">))</span> <span class="o">+</span> <span class="s">"_"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">ydif</span><span class="p">))</span> <span class="o">+</span> <span class="s">"_"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">vel</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">dump_qvalues</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">force</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="s">"""
        Dump the qvalues to the JSON file
        """</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">gameCNT</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">DUMPING_N</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">force</span><span class="p">:</span>
            <span class="n">fil</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"qvalues.json"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span>
            <span class="n">json</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">qvalues</span><span class="p">,</span> <span class="n">fil</span><span class="p">)</span>
            <span class="n">fil</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Q-values updated on local file."</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python learn.py <span class="nt">--verbose</span> 5000
</code></pre></div></div>

<p><img src="/assets/image/2019-12-19-1.jpg" alt="verbose5000" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python learn.py <span class="nt">--verbose</span> 10000
</code></pre></div></div>

<p><img src="/assets/image/2019-12-19-2.jpg" alt="verbose10000" /></p>
:ET